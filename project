package ev3testing2;

import lejos.hardware.Sound;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.motor.EV3MediumRegulatedMotor;
import lejos.hardware.port.MotorPort;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.EV3IRSensor;
import lejos.hardware.sensor.EV3UltrasonicSensor;
import lejos.hardware.sensor.NXTUltrasonicSensor;
import lejos.robotics.SampleProvider;
import lejos.robotics.subsumption.Arbitrator;
import lejos.robotics.subsumption.Behavior;
import lejos.utility.Delay;

public class project {

	///static Arbitrator arby;
	static boolean hasBall;
	public static EV3LargeRegulatedMotor lMotor;
	public static EV3LargeRegulatedMotor rMotor;
	public static SharedUltrasonicSensor uSensor;
	public static SharedIRSensor iSensor;
	public static SharedColorSensor cSensor;
	public static EV3MediumRegulatedMotor arm;
	
	public static void main(String[] args) {
		
		// TODO Auto-generated method stub
		hasBall = false;
		//specify behaviors inside a multi-thread program
		//behavior 1 might be the drive forward behavior
		//behavior 2 might avoid obstacles and react accordingly, - triggered by seeing an obstacle, behavior might backup and make a turn, orientate back on the line, and release
		//behavior 3 might find the line again after avoiding
		
		EV3LargeRegulatedMotor lMotor = new EV3LargeRegulatedMotor(MotorPort.B); //! 11-25
		EV3LargeRegulatedMotor rMotor = new EV3LargeRegulatedMotor(MotorPort.A); //check ports
		EV3MediumRegulatedMotor arm = new EV3MediumRegulatedMotor(MotorPort.D);
		SharedIRSensor iSensor = new SharedIRSensor();
		SharedUltrasonicSensor uSensor = new SharedUltrasonicSensor();
		SharedColorSensor cSensor = new SharedColorSensor();
		iSensor.start();
		uSensor.start();
		cSensor.start();
		Delay.msDelay(10000);
		//iSensor.run();
		//uSensor.run();
		//cSensor.run();
		Behavior b1 = new MazeNavigator(lMotor, rMotor, iSensor, uSensor, cSensor); // I think its done without parameters, just use the motors and sensors in this class: uSensor
		//Behavior b2 = new how many behaviors? 
		Behavior b2 = new GrabBall(); //pass sensors/ motors as parameters? idk
		Behavior b3 = new ExitMaze();
		Behavior[] behave = {b1}; //{b1, b2, b3};
		Arbitrator arby = new Arbitrator(behave);
		System.out.println(b1);
		System.out.println(arby);
		arby.go();
	}
	
}
class SharedIRSensor extends Thread{

	public int control = 0;
	public float iDistance = 0;
	public int maxIRDistance = 20; //!
	public void run() {
		System.out.println("hit IR: ");
		EV3IRSensor iSensor = new EV3IRSensor(SensorPort.S1);
		SampleProvider sp = iSensor.getDistanceMode();
		while (true) {
			System.out.println("running in IR: " + iDistance );

			float[] sample = new float[sp.sampleSize()];
			sp.fetchSample(sample, 0);
			iDistance = (float)sample[0];
			System.out.println("IR Distance = " + iDistance);
			
		}
		
	}
}
class SharedUltrasonicSensor extends Thread{

	public int control = 0;
	public static float uDistance = 0;
	public int maxUltrasonicDistance = 20; //!
	
	public void run() { // uSensor.start() sould run this i think
		System.out.println("running in ULtraSonic: ");
		NXTUltrasonicSensor uSensor = new NXTUltrasonicSensor(SensorPort.S3); // check ports
		SampleProvider sp = uSensor.getDistanceMode();
		while (true) {
			float[] sample = new float[sp.sampleSize()];
			sp.fetchSample(sample, 0);
			uDistance = (float)sample[0]; //centimeters??
			System.out.println("Ultrasonic Distance = " + uDistance);
		}
	}
}
class SharedColorSensor extends Thread{
	
	
	
	 // 7 = brown, , 4 = yellow, 5 = red, 2 = blue
	public static int cColor = 0;
	public void run() {
		EV3ColorSensor cSensor = new EV3ColorSensor(SensorPort.S2);
		SampleProvider sp = cSensor.getColorIDMode();
		while (true) {
			float[] sample = new float[sp.sampleSize()];
			sp.fetchSample(sample, 0);
			cColor = (int)sample[0];
			System.out.println("color found: " + cColor);
		}
	}
}

class MazeNavigator implements Behavior {

	EV3LargeRegulatedMotor left;
	EV3LargeRegulatedMotor right;
	SharedUltrasonicSensor uSensor;
	SharedIRSensor iSensor;
	SharedColorSensor cSensor;
	public MazeNavigator(EV3LargeRegulatedMotor lMotor,EV3LargeRegulatedMotor rMotor,SharedIRSensor iSensor,SharedUltrasonicSensor uSensor,SharedColorSensor cSensor)
		{
		this.left = lMotor;
		this.right = rMotor;
		this.iSensor =  iSensor;
		this.uSensor = uSensor;
		this.cSensor = cSensor;
	}
	
	private boolean _suppressed = false;

	@Override
	public boolean takeControl() {
		//navigation while we don't have the ball?
		//or, should we navigate while we don't know the exit? 
		return !project.hasBall;
	}
	@Override
	public void action() {
System.out.println("asdfqwerty");
		left.setSpeed(100);
		right.setSpeed(100);
	
		while (!_suppressed) {
			System.out.println("while loop 1: Isensor: " + iSensor.iDistance + " uSensorDistance: " + uSensor.uDistance );
			
			if (iSensor.iDistance < 15 && iSensor.iDistance > 5) {
				right.forward();
				left.forward();
			} else if (iSensor.iDistance < 5) {
				left.stop(true);
				right.stop(true); // too close to the wall,
				Delay.msDelay(500);			//slightly adjust to the left
				while (iSensor.iDistance < 5) {
					System.out.println("while loop 2: iSsensor: " + iSensor.iDistance + " uSensorDistance: " + uSensor.uDistance );
					right.forward();
					left.backward();
				}
			}
			else if (iSensor.iDistance > 200000) {
				right.forward();
				left.forward();
			}
			else {// T-intersection or 4 way -> right turn
				Delay.msDelay(15000);
				left.stop(true);
				right.stop(true);
				left.forward();
				right.backward();
			}
			//move forward, identify walls, plot points	
			
			// TODO: CHANGE uDistance value blow
			 if (uSensor.uDistance < .05) {// T- intersection, corner, or dead-end
				 right.stop(true); //turn left
				 left.stop(true);
				 
				 // TODO : change iDistance value 7.5
				 if (iSensor.iDistance < 15) { //
					while(uSensor.uDistance < .07) {
						System.out.println("while loop 3: iSensor: " + iSensor.iDistance + " uSensorDistance: " + uSensor.uDistance );

						right.forward();
						left.backward();
						System.out.println("while loop 4: Isensor: " + iSensor.iDistance + " uSensorDistance: " + uSensor.uDistance );

					}
				 } else {
					 while(uSensor.uDistance < .07) {
							System.out.println("while loop 5: Isensor: " + iSensor.iDistance + " uSensorDistance: " + uSensor.uDistance );

							right.backward();
							left.forward();
							System.out.println("while loop 6: Isensor: " + iSensor.iDistance + " uSensorDistance: " + uSensor.uDistance );

					 }
				 }
			 }
		} 
	}

	@Override
	public void suppress() {
		
            Sound.beep();
    
            // We change this to approach from either direction.
         
                if (cSensor.cColor == 2) { // 2 == blue so stop                     
            // We only get here when the distance is right, so stop the motors.
                		right.stop(true);
                		left.stop(true);    
           				_suppressed = true;
                }

	}
	
class GrabBall implements Behavior {

	EV3LargeRegulatedMotor right;
	EV3LargeRegulatedMotor left;
	EV3MediumRegulatedMotor arm;
	public GrabBall(EV3LargeRegulatedMotor right, EV3LargeRegulatedMotor left, EV3MediumRegulatedMotor arm) {
		//add sensors later please
		this.right = right;
		this.left = left;
		this.arm = arm;
	}
	@Override
	public void action() {
		float ballDistance = 12f; //! hard-code this as the distance from the IR sensor to the ball - atctivate claw
		float ballSensorDistance = 0; // update this with the actual value of the ball distance
		float wallDistance = (float) 0.1;//! hard-code this as the minimum distance to the wall to avoid collision
		float wallSensorDistance = 0; // update with the active 		
				
		arm.setSpeed(400);
		right.setSpeed(150);
		left.setSpeed(150);
		System.out.println("Ready to disconnect!");
		//Delay.msDelay(6000);
		right.forward();
		left.forward();
		//SampleProvider sp = cSensor.getColorIDMode();
		SampleProvider sp = iSensor.sp; //returns a value in CM
		SampleProvider sp2 = uSensor.sp; //returns a value in meters
		SampleProvider sp3 = cSensor.sp;
		boolean hasBall = false;	
		while (!hasBall) {
			float [] sample = new float[sp.sampleSize()];
			float [] sample2 = new float[sp2.sampleSize()];
			float [] sample3 = new float[sp3.sampleSize()];
			sp.fetchSample(sample, 0);
			sp2.fetchSample(sample2, 0);
			ballSensorDistance = (float)sample3[0];
			
			System.out.println("ballDistance=" +  ballSensorDistance);
			wallSensorDistance = (float)sample2[0];
			//System.out.println("iteration#: " + i + "wallDistance=" +  wallSensorDistance);
			if(ballSensorDistance <= ballDistance) {
				right.stop();
				left.stop();
				System.out.println("Reached ballDistance threshold. Closing arm" + "distance found was " +ballSensorDistance);
				//System.out.println("Batt Info(V,BA,MA): " + Battery.getVoltage() + ", " + Battery.getBatteryCurrent() + ", " + Battery.getMotorCurrent());
				arm.rotate(-1100);
				//arm.rotate(-900);
				Delay.msDelay(7000);
				//rMotor.forward();
				//lMotor.forward();
				//Delay.msDelay(7000);
				right.stop();
				left.stop();
				arm.rotate(1100);
				//arm.rotate(900);
				Delay.msDelay(1000);
				break;
			}
			//System.out.println("Iteration: " + i);
			//System.out.println("Color: " + colorValue);
			//System.out.println("Batt Info(V,BA,MA): " + Battery.getVoltage() + ", " + Battery.getBatteryCurrent() + ", " + Battery.getMotorCurrent());
			Delay.msDelay(100);
		}

		//rMotor.stop();
		//lMotor.stop();
		right.close();
		left.close();
		arm.close();
	}
	@Override
	public boolean takeControl() {
		// 
		return false;
	}
	@Override
	public void suppress() {
		// TODO Auto-generated method stub
		
	}
}

class ExitMaze implements Behavior{

	@Override
	public boolean takeControl() {
		// if we have the ball, exitMaze always has control
		return project.hasBall;
	}

	@Override
	public void action() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void suppress() {
		return;
	}
		
	}
}

